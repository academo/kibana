/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  EuiButton,
  EuiButtonEmpty,
  EuiFlexGroup,
  EuiFlexItem,
  EuiFlyout,
  EuiFlyoutBody,
  EuiFlyoutFooter,
  EuiFlyoutHeader,
  EuiTitle,
} from '@elastic/eui';
import { FormattedMessage } from '@kbn/i18n/react';
import {
  CreateExceptionListItemSchema,
  UpdateExceptionListItemSchema,
} from '@kbn/securitysolution-io-ts-list-types';
import { omit } from 'lodash';
import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';
import { useDispatch } from 'react-redux';
import { useHistory } from 'react-router-dom';
import { Dispatch } from 'redux';
import { useQuery, useQueryClient } from 'react-query';
import { ServerApiError } from '../../../../../common/types';
import { Loader } from '../../../../../common/components/loader';
import { useHttp, useToasts } from '../../../../../common/lib/kibana';
import { getHostIsolationExceptionsListPath } from '../../../../common/routing';
import {
  isLoadedResourceState,
  isLoadingResourceState,
} from '../../../../state/async_resource_state';
import {
  getCreateErrorMessage,
  getCreationSuccessMessage,
  getLoadErrorMessage,
  getUpdateErrorMessage,
  getUpdateSuccessMessage,
} from './translations';
import { HostIsolationExceptionsPageAction } from '../../store/action';
import { getCurrentLocation, getExceptionToEdit, getFormStatusFailure } from '../../store/selector';
import { createEmptyHostIsolationException } from '../../utils';
import { useHostIsolationExceptionsSelector } from '../hooks';
import { HostIsolationExceptionsForm } from './form';
import { getOneHostIsolationExceptionItem } from '../../service';

export const HostIsolationExceptionsFormFlyout = memo(
  ({ onCancel, id }: { onCancel: (refresh?: boolean) => void; id?: string }) => {
    const http = useHttp();
    const [exception, setException] = useState<
      CreateExceptionListItemSchema | UpdateExceptionListItemSchema | undefined
    >(undefined);

    const request = useQuery<UpdateExceptionListItemSchema | undefined, ServerApiError>(
      ['hostIsolationExceptions', 'form', id],
      async () => {
        // for editing, fetch from the API
        if (id !== undefined) {
          return getOneHostIsolationExceptionItem(http, id);
        }
        // for adding, return a new empty object
        return createEmptyHostIsolationException();
      },
      {
        keepPreviousData: true,
        onSuccess: (data) => {
          setException(data);
        },
      }
    );

    const dispatch = useDispatch<Dispatch<HostIsolationExceptionsPageAction>>();
    const toasts = useToasts();
    const location = useHostIsolationExceptionsSelector(getCurrentLocation);
    const creationInProgress = useHostIsolationExceptionsSelector((state) =>
      isLoadingResourceState(state.form.status)
    );
    const creationSuccessful = useHostIsolationExceptionsSelector((state) =>
      isLoadedResourceState(state.form.status)
    );
    const creationFailure = useHostIsolationExceptionsSelector(getFormStatusFailure);
    const exceptionToEdit = useHostIsolationExceptionsSelector(getExceptionToEdit);
    const queryClient = useQueryClient();
    const history = useHistory();

    const [formHasError, setFormHasError] = useState(true);

    // handle creation and edit success
    useEffect(() => {
      if (creationSuccessful && exception?.name) {
        onCancel();
        dispatch({
          type: 'hostIsolationExceptionsFormStateChanged',
          payload: {
            type: 'UninitialisedResourceState',
          },
        });
        if (exception?.item_id) {
          toasts.addSuccess(getUpdateSuccessMessage(exception.name));
        } else {
          toasts.addSuccess(getCreationSuccessMessage(exception.name));
        }
        queryClient.invalidateQueries('hostIsolationExceptions');
      }
    }, [
      creationSuccessful,
      dispatch,
      exception?.item_id,
      exception?.name,
      onCancel,
      queryClient,
      toasts,
    ]);

    // handle load item to edit error
    useEffect(() => {
      if (creationFailure && location.show === 'edit' && !exception?.item_id) {
        toasts.addWarning(getLoadErrorMessage(creationFailure));
        history.replace(getHostIsolationExceptionsListPath(omit(location, ['show', 'id'])));
        dispatch({
          type: 'hostIsolationExceptionsFormStateChanged',
          payload: {
            type: 'UninitialisedResourceState',
          },
        });
      }
    }, [creationFailure, dispatch, exception?.item_id, history, location, toasts]);

    // handle edit or creation error
    useEffect(() => {
      if (creationFailure) {
        // failed to load the entry
        if (exception?.item_id) {
          toasts.addDanger(getUpdateErrorMessage(creationFailure));
        } else {
          toasts.addDanger(getCreateErrorMessage(creationFailure));
        }
        dispatch({
          type: 'hostIsolationExceptionsFormStateChanged',
          payload: {
            type: 'UninitialisedResourceState',
          },
        });
      }
    }, [creationFailure, dispatch, exception?.item_id, toasts]);

    const handleOnCancel = useCallback(() => {
      if (creationInProgress) return;
      onCancel();
    }, [creationInProgress, onCancel]);

    const handleOnSubmit = useCallback(() => {
      if (exception?.item_id) {
        dispatch({
          type: 'hostIsolationExceptionsSubmitEdit',
          payload: exception,
        });
      } else {
        dispatch({
          type: 'hostIsolationExceptionsCreateEntry',
          payload: exception,
        });
      }
    }, [dispatch, exception]);

    const confirmButtonMemo = useMemo(
      () => (
        <EuiButton
          data-test-subj="add-exception-confirm-button"
          fill
          disabled={formHasError || creationInProgress}
          onClick={handleOnSubmit}
          isLoading={creationInProgress}
        >
          {exception?.item_id ? (
            <FormattedMessage
              id="xpack.securitySolution.hostIsolationExceptions.flyout.editButton"
              defaultMessage="Edit host isolation exception"
            />
          ) : (
            <FormattedMessage
              id="xpack.securitySolution.hostIsolationExceptions.flyout.createButton"
              defaultMessage="Add host isolation exception"
            />
          )}
        </EuiButton>
      ),
      [formHasError, creationInProgress, handleOnSubmit, exception?.item_id]
    );

    return exception ? (
      <EuiFlyout
        size="m"
        onClose={handleOnCancel}
        data-test-subj="hostIsolationExceptionsCreateEditFlyout"
      >
        <EuiFlyoutHeader hasBorder>
          <EuiTitle size="m">
            {exception?.item_id ? (
              <h2>
                <FormattedMessage
                  id="xpack.securitySolution.hostIsolationExceptions.flyout.editTitle"
                  defaultMessage="Edit host isolation exception"
                />
              </h2>
            ) : (
              <h2>
                <FormattedMessage
                  id="xpack.securitySolution.hostIsolationExceptions.flyout.title"
                  defaultMessage="Add host isolation exception"
                />
              </h2>
            )}
          </EuiTitle>
        </EuiFlyoutHeader>

        <EuiFlyoutBody>
          <HostIsolationExceptionsForm
            onChange={setException}
            exception={exception}
            onError={setFormHasError}
          />
        </EuiFlyoutBody>

        <EuiFlyoutFooter>
          <EuiFlexGroup justifyContent="spaceBetween">
            <EuiFlexItem grow={false}>
              <EuiButtonEmpty data-test-subj="add-exception-cancel-button" onClick={handleOnCancel}>
                <FormattedMessage
                  id="xpack.securitySolution.hostIsolationExceptions.flyout.cancel"
                  defaultMessage="Cancel"
                />
              </EuiButtonEmpty>
            </EuiFlexItem>
            <EuiFlexItem grow={false}>{confirmButtonMemo}</EuiFlexItem>
          </EuiFlexGroup>
        </EuiFlyoutFooter>
      </EuiFlyout>
    ) : (
      <Loader size="xl" />
    );
  }
);

HostIsolationExceptionsFormFlyout.displayName = 'HostIsolationExceptionsFormFlyout';
